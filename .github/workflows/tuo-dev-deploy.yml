name: TUO-Dev-Deploy

on:
  workflow_dispatch:
  workflow_run:
    branches: [dev]
    workflows: [Build-Test]
    types:
      - completed
      
concurrency:
  group: maindeploy
  cancel-in-progress: true

env:
  CUO_OUTPUT_PATH: '../../bin/dist'
  CUO_PROJECT_PATH: "src/ClassicUO.Client/ClassicUO.Client.csproj"
  CUO_ZIP_NAME: "TazUO.zip"
  TAG_NAME: "TazUO-BleedingEdge"

  DOTNET_NOLOGO: false
  DOTNET_CLI_TELEMETRY_OPTOUT: 1
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  NUGET_XMLDOC_MODE: skip

jobs:
  removeoldrelease:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v1

    - name: Get last release tag
      id: last_release
      run: |
        LAST_TAG=$(git tag --list "${{ env.TAG_NAME }}" | grep -v "${{ github.event.inputs.tag }}" | sort -V | tail -n1 || echo "")
        echo "last_tag=$LAST_TAG" >> $GITHUB_ENV
        echo "Last matching tag: $LAST_TAG"

    - name: Generate release notes
      id: release_notes
      run: |
        if [ -z "$last_tag" ]; then
          echo "No previous release found matching pattern. Listing all commits."
          git log --pretty=format:"- %s" > release-notes.md
        else
          echo "Generating release notes from $last_tag to ${{ github.event.inputs.tag }}"
          git log $last_tag..${{ github.event.inputs.tag }} --pretty=format:"- %s" > release-notes.md
        fi
    
    - name: Remove old Release
      uses: dev-drprasad/delete-tag-and-release@v0.2.1
      with:
        delete_release: true
        tag_name: ${{ env.TAG_NAME }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
  build:
    # if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ${{ matrix.os }}
    strategy:
      max-parallel: 1
      matrix:
       os: [  windows-latest ]

    steps:
    - uses: actions/checkout@v4
      with:
        ref: 'dev'

    - name: Extract Version
      shell: bash
      run: |
        export LC_ALL=C.UTF-8
        echo "VERSION=$(grep -oP '<AssemblyVersion>\K\d+\.\d+\.\d+' src/ClassicUO.Client/ClassicUO.Client.csproj)" >> $GITHUB_ENV

    - name: Get submodules
      run: |
        git config --global url."https://".insteadOf git://
        git submodule update --init --recursive
        
    - name: Setup .NET 8
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
            
    - name: Build
      run: dotnet publish ${{ env.CUO_PROJECT_PATH }} -c Release -o ${{ env.CUO_OUTPUT_PATH }} -p:IS_DEV_BUILD=true
      
    - name: Create package
      uses: thedoctor0/zip-release@master
      with:
        type: 'zip'
        directory: ${{ env.CUO_OUTPUT_PATH }}
        filename: ${{ env.CUO_ZIP_NAME }}
        exclusions: '*.zip'
        
    - name: Read release notes into environment variable
      run: echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV && cat release-notes.md >> $GITHUB_ENV && echo "EOF" >> $GITHUB_ENV
          
    - name: Upload Release
      uses: ncipollo/release-action@v1
      with:
        artifacts: "${{ env.CUO_OUTPUT_PATH }}/${{ env.CUO_ZIP_NAME }}"
        name: 'TazUO Bleeding Edge v${{ env.VERSION }}'
        body: |
          These are built automatically on the dev branch. 
          These may include features that are still being worked on/not complete.
          
          This is version v${{ env.VERSION }}        

          ${{ env.RELEASE_NOTES }}
        makeLatest: false
        allowUpdates: true
        prerelease: true
        tag: ${{ env.TAG_NAME }}
        token: ${{ secrets.GITHUB_TOKEN }}
        
        
